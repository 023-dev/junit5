apply plugin: 'org.junit.gen5.gradle'

jar.enabled = false
javadoc.enabled = false
javadocJar.enabled = false
sourcesJar.enabled = false
uploadArchives.enabled = false

junit5 {
	// version '5.0.0-SNAPSHOT' // not needed since all dependencies are declared explicitly
	runJunit4 true
	matchClassName '.*Tests?'
	logManager 'org.apache.logging.log4j.jul.LogManager'
	// includeTag 'fast'
	// excludeTag 'slow'
}


configurations {
	clover {}
	tested {}
}

def testedProjects = [
	project(':junit-commons'),
	project(':junit-console'),
	project(':junit-engine-api'),
	project(':junit-launcher'),
	project(':junit4-engine'),
	project(':junit4-runner'),
	project(':junit5-api'),
	project(':junit5-engine')
]

dependencies {
	testedProjects.each { project ->
		tested(project)
	}

	testCompile("org.assertj:assertj-core:${assertJVersion}")
	testCompile("org.mockito:mockito-core:${mockitoVersion}")

	testRuntime("org.apache.logging.log4j:log4j-core:${log4JVersion}")
	testRuntime("org.apache.logging.log4j:log4j-jul:${log4JVersion}")

    clover 'com.atlassian.clover:clover:4.1.1'
}

task cloverInstrument {
    def cloverDir = file("$buildDir/clover")
	def instrumentedSourcesDir = file("$cloverDir/instrumentedSources")
    outputs.dir cloverDir
	compileTestJava.dependsOn cloverInstrument
    doLast {
		ant.taskdef(resource:'cloverlib.xml', classpath: configurations.clover.asPath)
		ant.property(name: 'clover.license.path', value: rootProject.file('clover.license').absolutePath)
		ant.'clover-instr'(
			initstring: "$cloverDir/coverage.db",
			destdir: instrumentedSourcesDir,
			source: compileTestJava.sourceCompatibility) {
			testedProjects.each { project ->
				project.sourceSets.main.allJava.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
			}
			sourceSets.test.allJava.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
			testsources(dir: sourceSets.test.allJava.srcDirs[0].absolutePath) {
				testclass(name: '.*Tests?') {
					testmethod(annotation: 'org.junit.gen5.api.Test')
				}
			}
		}
		compileTestJava.source = instrumentedSourcesDir
		compileTestJava.classpath = configurations.testRuntime.plus(configurations.clover)
		testedProjects.each { project ->
			compileTestJava.classpath = compileTestJava.classpath.plus(project.configurations.runtime)
		}
		sourceSets.test.runtimeClasspath = files(instrumentedSourcesDir).plus(compileTestJava.classpath)
    }
}
