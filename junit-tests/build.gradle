apply plugin: 'org.junit.gen5.gradle'

jar.enabled = false
javadoc.enabled = false
javadocJar.enabled = false
sourcesJar.enabled = false
uploadArchives.enabled = false

junit5 {
	// version '5.0.0-SNAPSHOT' // not needed since all dependencies are declared explicitly
	runJunit4 true
	matchClassName '.*Tests?'
	logManager 'org.apache.logging.log4j.jul.LogManager'
	// includeTag 'fast'
	// excludeTag 'slow'
}

def testedProjects = [
	project(':junit-commons'),
	project(':junit-console'),
	project(':junit-engine-api'),
	project(':junit-launcher'),
	project(':junit4-engine'),
	project(':junit4-runner'),
	project(':junit5-api'),
	project(':junit5-engine')
]

dependencies {
	testedProjects.each { project ->
		testCompile(project)
	}

	testCompile("org.assertj:assertj-core:${assertJVersion}")
	testCompile("org.mockito:mockito-core:${mockitoVersion}")

	testRuntime("org.apache.logging.log4j:log4j-core:${log4JVersion}")
	testRuntime("org.apache.logging.log4j:log4j-jul:${log4JVersion}")
}

def instrumentedTestsDir = file("$cloverDir/instrumentedTests")

task cloverTestInstrument(dependsOn: cloverTaskdef) {
	outputs.dir cloverDir
	doLast {
		ant.'clover-instr'(
			initstring: "$cloverDir/coverage.db",
			destdir: instrumentedTestsDir,
			source: compileTestJava.sourceCompatibility) {
				sourceSets.test.allJava.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
				testsources(dir: sourceSets.test.allJava.srcDirs[0].absolutePath) {
					testclass(name: '[^.]*Tests?(\\.((?!TestCase).)*)?$') {
						testmethod(annotation: '.*Test')
					}
				}
		}
	}
}

compileTestJava.source = instrumentedTestsDir
compileTestJava.classpath += configurations.clover
compileTestJava.dependsOn cloverTestInstrument

def cloverAggregationFile = "$cloverDir/aggregated.db"

task cloverAggregateDatabases(dependsOn: cloverTaskdef) {
	outputs.file cloverAggregationFile
	doLast {
		ant.'clover-merge'(initString: cloverAggregationFile) {
			cloverDb(initString: "$cloverDir/coverage.db")
			testedProjects.each { project ->
				def cloverDbFile = project.file("${project.cloverDir}/coverage.db")
				if(cloverDbFile.exists()) {
					cloverDb(initString: cloverDbFile.canonicalPath)
				}
			}
		}
	}
}

task cloverHtmlReport(dependsOn: cloverAggregateDatabases) {
	outputs.dir "$buildDir/reports/clover/html"
	doLast {
		ant."clover-report"(initString: cloverAggregationFile) {
			current(outfile: "$buildDir/reports/clover/html", title: rootProject.description) {
				format(type: 'html')
			}
		}
	}
}

task cloverXmlReport(dependsOn: cloverAggregateDatabases) {
	outputs.file "$buildDir/reports/clover/clover.xml"
	doLast {
		ant."clover-report"(initString: cloverAggregationFile) {
			current(outfile: "$buildDir/reports/clover/clover.xml", title: rootProject.description) {
				format(type: 'xml')
			}
		}
	}
}

afterEvaluate {
	cloverAggregateDatabases.dependsOn junit5Test
}
